// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DroneUIClient is the client API for DroneUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DroneUIClient interface {
	// ListDroneSpecs returns a list of Drone(s) that can be started through the UI.
	ListDroneSpecs(ctx context.Context, in *ListDroneSpecsRequest, opts ...grpc.CallOption) (DroneUI_ListDroneSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type droneUIClient struct {
	cc grpc.ClientConnInterface
}

func NewDroneUIClient(cc grpc.ClientConnInterface) DroneUIClient {
	return &droneUIClient{cc}
}

func (c *droneUIClient) ListDroneSpecs(ctx context.Context, in *ListDroneSpecsRequest, opts ...grpc.CallOption) (DroneUI_ListDroneSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DroneUI_ServiceDesc.Streams[0], "/v1.DroneUI/ListDroneSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &droneUIListDroneSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DroneUI_ListDroneSpecsClient interface {
	Recv() (*ListDroneSpecsResponse, error)
	grpc.ClientStream
}

type droneUIListDroneSpecsClient struct {
	grpc.ClientStream
}

func (x *droneUIListDroneSpecsClient) Recv() (*ListDroneSpecsResponse, error) {
	m := new(ListDroneSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *droneUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.DroneUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DroneUIServer is the server API for DroneUI service.
// All implementations must embed UnimplementedDroneUIServer
// for forward compatibility
type DroneUIServer interface {
	// ListDroneSpecs returns a list of Drone(s) that can be started through the UI.
	ListDroneSpecs(*ListDroneSpecsRequest, DroneUI_ListDroneSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedDroneUIServer()
}

// UnimplementedDroneUIServer must be embedded to have forward compatible implementations.
type UnimplementedDroneUIServer struct {
}

func (UnimplementedDroneUIServer) ListDroneSpecs(*ListDroneSpecsRequest, DroneUI_ListDroneSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDroneSpecs not implemented")
}
func (UnimplementedDroneUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedDroneUIServer) mustEmbedUnimplementedDroneUIServer() {}

// UnsafeDroneUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DroneUIServer will
// result in compilation errors.
type UnsafeDroneUIServer interface {
	mustEmbedUnimplementedDroneUIServer()
}

func RegisterDroneUIServer(s grpc.ServiceRegistrar, srv DroneUIServer) {
	s.RegisterService(&DroneUI_ServiceDesc, srv)
}

func _DroneUI_ListDroneSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDroneSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DroneUIServer).ListDroneSpecs(m, &droneUIListDroneSpecsServer{stream})
}

type DroneUI_ListDroneSpecsServer interface {
	Send(*ListDroneSpecsResponse) error
	grpc.ServerStream
}

type droneUIListDroneSpecsServer struct {
	grpc.ServerStream
}

func (x *droneUIListDroneSpecsServer) Send(m *ListDroneSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DroneUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DroneUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DroneUI_ServiceDesc is the grpc.ServiceDesc for DroneUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DroneUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DroneUI",
	HandlerType: (*DroneUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _DroneUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDroneSpecs",
			Handler:       _DroneUI_ListDroneSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "drone-ui.proto",
}
