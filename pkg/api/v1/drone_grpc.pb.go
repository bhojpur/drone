// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DroneServiceClient is the client API for DroneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DroneServiceClient interface {
	// StartLocalDrone starts a Drone on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the drone/config.yaml
	//   3. all bytes constituting the Drone YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDrone(ctx context.Context, opts ...grpc.CallOption) (DroneService_StartLocalDroneClient, error)
	// StartFromPreviousDrone starts a new Drone based on a previous one.
	// If the previous Drone does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDrone(ctx context.Context, in *StartFromPreviousDroneRequest, opts ...grpc.CallOption) (*StartDroneResponse, error)
	// StartDroneRequest starts a new Drone based on its specification.
	StartDrone(ctx context.Context, in *StartDroneRequest, opts ...grpc.CallOption) (*StartDroneResponse, error)
	// Searches for Drone(s) known to this Drone
	ListDrones(ctx context.Context, in *ListDronesRequest, opts ...grpc.CallOption) (*ListDronesResponse, error)
	// Subscribe listens to new Drone(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (DroneService_SubscribeClient, error)
	// GetDrone retrieves details of a single Drone
	GetDrone(ctx context.Context, in *GetDroneRequest, opts ...grpc.CallOption) (*GetDroneResponse, error)
	// Listen listens to Drone updates and log output of a running Drone
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (DroneService_ListenClient, error)
	// StopDrone stops a currently running Drone
	StopDrone(ctx context.Context, in *StopDroneRequest, opts ...grpc.CallOption) (*StopDroneResponse, error)
}

type droneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDroneServiceClient(cc grpc.ClientConnInterface) DroneServiceClient {
	return &droneServiceClient{cc}
}

func (c *droneServiceClient) StartLocalDrone(ctx context.Context, opts ...grpc.CallOption) (DroneService_StartLocalDroneClient, error) {
	stream, err := c.cc.NewStream(ctx, &DroneService_ServiceDesc.Streams[0], "/v1.DroneService/StartLocalDrone", opts...)
	if err != nil {
		return nil, err
	}
	x := &droneServiceStartLocalDroneClient{stream}
	return x, nil
}

type DroneService_StartLocalDroneClient interface {
	Send(*StartLocalDroneRequest) error
	CloseAndRecv() (*StartDroneResponse, error)
	grpc.ClientStream
}

type droneServiceStartLocalDroneClient struct {
	grpc.ClientStream
}

func (x *droneServiceStartLocalDroneClient) Send(m *StartLocalDroneRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *droneServiceStartLocalDroneClient) CloseAndRecv() (*StartDroneResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartDroneResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *droneServiceClient) StartFromPreviousDrone(ctx context.Context, in *StartFromPreviousDroneRequest, opts ...grpc.CallOption) (*StartDroneResponse, error) {
	out := new(StartDroneResponse)
	err := c.cc.Invoke(ctx, "/v1.DroneService/StartFromPreviousDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) StartDrone(ctx context.Context, in *StartDroneRequest, opts ...grpc.CallOption) (*StartDroneResponse, error) {
	out := new(StartDroneResponse)
	err := c.cc.Invoke(ctx, "/v1.DroneService/StartDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) ListDrones(ctx context.Context, in *ListDronesRequest, opts ...grpc.CallOption) (*ListDronesResponse, error) {
	out := new(ListDronesResponse)
	err := c.cc.Invoke(ctx, "/v1.DroneService/ListDrones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (DroneService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DroneService_ServiceDesc.Streams[1], "/v1.DroneService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &droneServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DroneService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type droneServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *droneServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *droneServiceClient) GetDrone(ctx context.Context, in *GetDroneRequest, opts ...grpc.CallOption) (*GetDroneResponse, error) {
	out := new(GetDroneResponse)
	err := c.cc.Invoke(ctx, "/v1.DroneService/GetDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (DroneService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &DroneService_ServiceDesc.Streams[2], "/v1.DroneService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &droneServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DroneService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type droneServiceListenClient struct {
	grpc.ClientStream
}

func (x *droneServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *droneServiceClient) StopDrone(ctx context.Context, in *StopDroneRequest, opts ...grpc.CallOption) (*StopDroneResponse, error) {
	out := new(StopDroneResponse)
	err := c.cc.Invoke(ctx, "/v1.DroneService/StopDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DroneServiceServer is the server API for DroneService service.
// All implementations must embed UnimplementedDroneServiceServer
// for forward compatibility
type DroneServiceServer interface {
	// StartLocalDrone starts a Drone on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the drone/config.yaml
	//   3. all bytes constituting the Drone YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDrone(DroneService_StartLocalDroneServer) error
	// StartFromPreviousDrone starts a new Drone based on a previous one.
	// If the previous Drone does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDrone(context.Context, *StartFromPreviousDroneRequest) (*StartDroneResponse, error)
	// StartDroneRequest starts a new Drone based on its specification.
	StartDrone(context.Context, *StartDroneRequest) (*StartDroneResponse, error)
	// Searches for Drone(s) known to this Drone
	ListDrones(context.Context, *ListDronesRequest) (*ListDronesResponse, error)
	// Subscribe listens to new Drone(s) updates
	Subscribe(*SubscribeRequest, DroneService_SubscribeServer) error
	// GetDrone retrieves details of a single Drone
	GetDrone(context.Context, *GetDroneRequest) (*GetDroneResponse, error)
	// Listen listens to Drone updates and log output of a running Drone
	Listen(*ListenRequest, DroneService_ListenServer) error
	// StopDrone stops a currently running Drone
	StopDrone(context.Context, *StopDroneRequest) (*StopDroneResponse, error)
	mustEmbedUnimplementedDroneServiceServer()
}

// UnimplementedDroneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDroneServiceServer struct {
}

func (UnimplementedDroneServiceServer) StartLocalDrone(DroneService_StartLocalDroneServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalDrone not implemented")
}
func (UnimplementedDroneServiceServer) StartFromPreviousDrone(context.Context, *StartFromPreviousDroneRequest) (*StartDroneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousDrone not implemented")
}
func (UnimplementedDroneServiceServer) StartDrone(context.Context, *StartDroneRequest) (*StartDroneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDrone not implemented")
}
func (UnimplementedDroneServiceServer) ListDrones(context.Context, *ListDronesRequest) (*ListDronesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrones not implemented")
}
func (UnimplementedDroneServiceServer) Subscribe(*SubscribeRequest, DroneService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDroneServiceServer) GetDrone(context.Context, *GetDroneRequest) (*GetDroneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrone not implemented")
}
func (UnimplementedDroneServiceServer) Listen(*ListenRequest, DroneService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedDroneServiceServer) StopDrone(context.Context, *StopDroneRequest) (*StopDroneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDrone not implemented")
}
func (UnimplementedDroneServiceServer) mustEmbedUnimplementedDroneServiceServer() {}

// UnsafeDroneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DroneServiceServer will
// result in compilation errors.
type UnsafeDroneServiceServer interface {
	mustEmbedUnimplementedDroneServiceServer()
}

func RegisterDroneServiceServer(s grpc.ServiceRegistrar, srv DroneServiceServer) {
	s.RegisterService(&DroneService_ServiceDesc, srv)
}

func _DroneService_StartLocalDrone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DroneServiceServer).StartLocalDrone(&droneServiceStartLocalDroneServer{stream})
}

type DroneService_StartLocalDroneServer interface {
	SendAndClose(*StartDroneResponse) error
	Recv() (*StartLocalDroneRequest, error)
	grpc.ServerStream
}

type droneServiceStartLocalDroneServer struct {
	grpc.ServerStream
}

func (x *droneServiceStartLocalDroneServer) SendAndClose(m *StartDroneResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *droneServiceStartLocalDroneServer) Recv() (*StartLocalDroneRequest, error) {
	m := new(StartLocalDroneRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DroneService_StartFromPreviousDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousDroneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).StartFromPreviousDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DroneService/StartFromPreviousDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).StartFromPreviousDrone(ctx, req.(*StartFromPreviousDroneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_StartDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDroneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).StartDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DroneService/StartDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).StartDrone(ctx, req.(*StartDroneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_ListDrones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDronesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).ListDrones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DroneService/ListDrones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).ListDrones(ctx, req.(*ListDronesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DroneServiceServer).Subscribe(m, &droneServiceSubscribeServer{stream})
}

type DroneService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type droneServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *droneServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DroneService_GetDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDroneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DroneService/GetDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetDrone(ctx, req.(*GetDroneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DroneServiceServer).Listen(m, &droneServiceListenServer{stream})
}

type DroneService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type droneServiceListenServer struct {
	grpc.ServerStream
}

func (x *droneServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DroneService_StopDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDroneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).StopDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DroneService/StopDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).StopDrone(ctx, req.(*StopDroneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DroneService_ServiceDesc is the grpc.ServiceDesc for DroneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DroneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DroneService",
	HandlerType: (*DroneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousDrone",
			Handler:    _DroneService_StartFromPreviousDrone_Handler,
		},
		{
			MethodName: "StartDrone",
			Handler:    _DroneService_StartDrone_Handler,
		},
		{
			MethodName: "ListDrones",
			Handler:    _DroneService_ListDrones_Handler,
		},
		{
			MethodName: "GetDrone",
			Handler:    _DroneService_GetDrone_Handler,
		},
		{
			MethodName: "StopDrone",
			Handler:    _DroneService_StopDrone_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalDrone",
			Handler:       _DroneService_StartLocalDrone_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DroneService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _DroneService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "drone.proto",
}
